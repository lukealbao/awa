// @flow

type FN<X, Y> = (domain: X) => Y;
type AwaValue<T> = // TODO: Is this too refined?
  & T
  & void; // TODO: How do we add the sentinel type (Symbol)?

declare class AwaIterator<T> {
  next():
  & (none: void) => {done: boolean, value: AwaValue<T>
                                           | Promise<AwaValue<T>>}
  & (resolved: T) => {done: boolean, value: AwaValue<T>};
}

declare class AwaIterable<In, Out> {
  debug(): void;
  inspect(): string;

  constructor(
    source: Iterable<In>,
    transduce: function,
    readyp: function,
    initialAccumulator?: FN<Out> // TODO: Wrong, default is [].
  ): AwaIterable<In, Out>;

  initialAccumulator(): FN<Out>; // TODO: Wrong, default is [].
  @@iterator(): AwaIterator<Out>;
};

export default AwaIterable;
